module X86.Tests where

import Data.List (intercalate)

import X86.Datatypes
import X86.X86
import ASM.ASM
import ASM.Datatypes

x86TestArray :: [(X86_64 (), String)]
x86TestArray = [
    {- Haskell assembly -}             {- Respective NASM command -}
    (setLabel "TEST"                   , ".TEST")
  , (mov  rax  (I64 0x7766554433221100), "mov rax, 0x7766554433221100")
  , (mov  r11  (I64 0x7766554433221100), "mov r11, 0x7766554433221100")
  , (mov  rbx  (I64 0x2A)              , "mov rbx, 0x2A")
  , (mov  rsp rcx                      , "mov rsp, rcx")
  , (xor  rbx rbx                      , "xor rbx, rbx")
  , (xor  rax rbx                      , "xor rax, rbx")
  , (xor  rbx rax                      , "xor rbx, rax")
  , (xor  rbx r12                      , "xor rbx, r12")
  , (xor  r12 rax                      , "xor r12, rax")
  , (push (I32 0x33221100)             , "push 0x33221100")
  , (inc  rdx                          , "inc rdx")
  , (inc  rax                          , "inc rax")
  , (inc  r9                           , "inc r9")
  , (test rax rax                      , "test rax, rax")
  , (test rbx rdx                      , "test rbx, rdx")
  , (test r9 rdx                       , "test r9,  rdx")
  , (pop  rbx                          , "pop rbx")
  , (pop  r9                           , "pop r9")
  , (ret                               , "ret")
  , (call rbx                          , "call rbx")
  , (call rax                          , "call rax")
  , (call r9                           , "call r9")
  , (add  rbx rdx                      , "add rbx, rdx")
  , (add  rbx r9                       , "add rbx, r9")
  , (add  r9 rbx                       , "add r9, rbx")
  , (add  r9 r9                        , "add r9, r9")
  , (push rbp                          , "push rbp")
  , (push rax                               , "push rax")
  , (push r12                               , "push r12")
  , (sub rdx (I32 0x33221100)               , "sub rdx, 0x33221100")
  , (add rdx (I32 0x33221100)               , "add rdx, 0x33221100")
  , (add r8  (I32 0x33221100)               , "add r8,  0x33221100")
  , (mov rdx (rbp `derefOffset` 0)          , "mov rdx, [rbp]")
  , (mov rax (rbp `derefOffset` 0)          , "mov rax, [rbp]")
  , (mov rdx (rdi `derefOffset` (-32768))   , "mov rdx, [rdi - 32768]")
  , (mov rdx (rdi `derefOffset` (-32767))   , "mov rdx, [rdi - 32767]")
  , (mov rdx (rdi `derefOffset` (-129))     , "mov rdx, [rdi - 129]")
  , (mov rdx (rdi `derefOffset` (-128))     , "mov rdx, [rdi - 128]")
  , (mov rdx (rdi `derefOffset` (-127))     , "mov rdx, [rdi - 127]")
  , (mov rdx (rdi `derefOffset` 127)        , "mov rdx, [rdi + 127]")
  , (mov rdx (rdi `derefOffset` 128)        , "mov rdx, [rdi + 128]")
  , (mov rdx (rdi `derefOffset` 129)        , "mov rdx, [rdi + 129]")
  , (mov rdx (rdi `derefOffset` (32768))    , "mov rdx, [rdi + 32768]")
  , (add rdx (rbp `derefOffset` 0)          , "add rdx, [rbp]")
  , (add rdx (rbp `derefOffset` (-128))     , "add rdx, [rbp - 128]")
  , (add rdx (rbp `derefOffset` 127)        , "add rdx, [rbp + 127]")
  , (sub rdx (rbp `derefOffset` 0)          , "sub rdx, [rbp]")
  , (sub rdx (rbp `derefOffset` (-128))     , "sub rdx, [rbp - 128]")
  , (sub rdx (rbp `derefOffset` 127)        , "sub rdx, [rbp + 127]")
  , (sub rdx rbx                            , "sub rdx, rbx")
  , (jmpPtrOffset8  rbp 0                   , "jmp [rbp]")
  , (jmpPtrOffset8  rdi 1                   , "jmp [rdi + 1]")
  , (jmpPtrOffset8  r11 1                   , "jmp [r11 + 1]")
  , (mov (rdi `derefOffset` (-128)) rdx     , "mov [rdi - 128],   rdx")
  , (mov (rdi `derefOffset` (-25600)) rdx   , "mov [rdi - 25600], rdx")
  , (cmp rbx (I32 0x33221100)               , "cmp rbx, 0x33221100")
  , (cmp rbx rdx                            , "cmp rbx, rdx")
  , (cmp rax (I32 0)                        , "cmp rax, 0")
  , (mul rbx                                , "mul rbx")
  , (mul rax                                , "mul rax")
  , (mul r11                                , "mul r11")
  , (sub rax (I32 1)                        , "sub rax, 1")
  , (add rax (I32 1)                        , "add rax, 1")
  , (jmp rax                                , "jmp rax")
  , (jmp rbx                                , "jmp rbx")
  , (jmp r10                                , "jmp r10")
  , (mov (rbp `derefOffset` 127) (I32 32)   , "mov qword [rbp + 127], 32")
  , (mov (rbp `derefOffset` 128) (I32 32)   , "mov qword [rbp + 128], 32")
  , (mov (rbp `derefOffset` 127) (I8  0x48) , "mov byte  [rbp + 127], 0x48")
  , (mov (rbp `derefOffset` 0)   (I8  0xEA) , "mov byte  [rbp + 0],   0xEA")
  , (mov (R8 BL) (rdi `derefOffset` 1)      , "mov byte  bl, [rdi+1]")
  , (mov (R8 AL) (rdi `derefOffset` 0)      , "mov byte  al, [rdi+0]")
  , (mov (R8 CL) (rcx `derefOffset` 0)      , "mov byte  cl, [rcx+0]")
  , (sal rax (I8 1)                         , "sal rax, 1")
  , (sal rbx (I8 1)                         , "sal rbx, 1")
  , (sal rbx (I8 2)                         , "sal rbx, 2")
  , (sal rbx cl                             , "sal rbx, cl")
  , (sal rdx cl                             , "sal rdx, cl")
  , (sar rax (I8 1)                         , "sar rax, 1")
  , (sar rbx (I8 1)                         , "sar rbx, 1")
  , (sar rbx (I8 2)                         , "sar rbx, 2")
  , (sar rbx cl                             , "sar rbx, cl")
  , (sar rdx cl                             , "sar rdx, cl")
  , (sal r9 cl                              , "sal r9,      cl")
  , (sal r9 (I8 2)                          , "sal r9,      2")
  , (mov (rbp `derefOffset` 64) cl          , "mov byte  [rbp + 64], cl")
  , (mov rsi (rsi `derefOffset` 8)          , "mov qword rsi, [rsi + 8]")
  , (mov rax (rsp `derefOffset` 8)          , "mov qword rax, [rsp + 8]")
  , (mov (rsp `derefOffset` 8) rax          , "mov qword [rsp + 8],   rax")
  , (mov (rsp `derefOffset` 255) rbx        , "mov qword [rsp + 255], rbx")
  , (mov (rsp `derefOffset` 8) (I32 100)    , "mov qword [rsp + 8],   100")
  , (mov (rsp `derefOffset` 255) (I32 100)  , "mov qword [rsp + 255], 100")
  , (mov (rsp `derefOffset` 255) (I8 0xEA)  , "mov byte  [rsp + 255], 0xEA")
  , (mov (rsp `derefOffset` 8)   (I8 0xEA)  , "mov byte  [rsp + 8],   0xEA")
  , (mov (r9  `derefOffset` 8)   (I8 0xEA)  , "mov byte  [r9  + 8],   0xEA")
  , (mov (r9  `derefOffset` 8)   cl         , "mov byte  [r9  + 8],   cl")
  , (and_ rdx (rbp `derefOffset` 0)         , "and rdx,  [rbp]")
  , (and_ rdx rbx                           , "and rdx,  rbx")
  , (and_ rdx (I32 9)                       , "and rdx,  9")
  , (and_ rax (I32 9)                       , "and rax,  9")
  , (pop  rax                               , "pop rax")
--  , (emitString "OK\n"                      , "msg db `OK\\n`")
  , (mov (R8 AL) (rsp `derefOffset` 0)      , "mov byte al, [rsp+0]")
  , (mov (R8 AL) (rcx `derefOffset` 0)      , "mov byte al, [rcx+0]")
  , (mov rax (derefOffset r9 1)             , "mov rax,     [r9+1]")
  , (mov rax (derefOffset rax 1)            , "mov rax,     [rax+1]")
  , (mov rax (derefOffset rsi 0)            , "mov rax,     [rsi]")
  , (mov r9 (derefOffset rax 1)             , "mov r9,      [rax+1]")
  , (mov r9 (derefOffset r8 1)              , "mov r9,      [r8+1]")
  , (mov r9 (derefOffset rax 0)             , "mov r9,      [rax]")
  , (mov r9 (derefOffset r8 0)              , "mov r9,      [r8]")
  , (mov rsp (derefOffset r8 0)             , "mov rsp,     [r8]")
  , (mov r9 (derefOffset rsp 0)             , "mov r9,      [rsp]")
  , (mov (derefOffset rsi 0) r15            , "mov qword [rsi + 0], r15") 
  , (mov (derefOffset rsp 0) r15            , "mov qword [rsp + 0], r15") 
  , (mov (derefOffset r11 0) rax            , "mov qword [r11 + 0], rax") 
  , (mov (derefOffset r11 0) rsp            , "mov qword [r11 + 0], rsp") 
  , (mov (derefOffset rsi 1) r15            , "mov qword [rsi + 1], r15") 
  , (mov (derefOffset rsp 1) r15            , "mov qword [rsp + 1], r15") 
  , (mov (derefOffset r11 1) rax            , "mov qword [r11 + 1], rax") 
  , (mov (derefOffset r11 1) rsp            , "mov qword [r11 + 1], rsp") 
  , (mov (derefOffset rsi 1) rax            , "mov qword [rsi + 1], rax") 
  , (mov (derefOffset rsi 1024) r15            , "mov qword [rsi + 1024], r15") 
  , (mov (derefOffset rsp 1024) r15            , "mov qword [rsp + 1024], r15") 
  , (mov (derefOffset r11 1024) rax            , "mov qword [r11 + 1024], rax") 
  , (mov (derefOffset r11 1024) rsp            , "mov qword [r11 + 1024], rsp") 
  , (mov (derefOffset r11 1024) (I32 0x100)    , "mov qword [r11 + 1024], 0x100") 
  , (mov (derefOffset r11 64)   (I32 0x100)    , "mov qword [r11 + 64],   0x100") 
  , (dec rsi                                   , "dec rsi") 
  , (dec r11                                   , "dec r11") 
  , (dec rax                                   , "dec rax") 
  , (mov r11 rsi                               , "mov r11, rsi")
  , (add rsp (derefOffset r9 24)               , "add rsp, [r9+24]")
  , (add rax (derefOffset r9 24)               , "add rax, [r9+24]")
  , (mov (derefOffset rax 8) bl                , "mov [rax+8], bl")
  , (mov (derefOffset rsp 8) bl                , "mov [rsp+8], bl")
  -- , (joNear "TEST"                             , "jo .TEST")
  ]

x86TestSuiteASM  = runX86 $ mapM fst x86TestArray
x86TestSuiteNASM = intercalate "\n" $ map snd x86TestArray
